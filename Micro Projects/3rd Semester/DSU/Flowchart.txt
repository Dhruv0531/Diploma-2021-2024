start
//Declare A,B,C as three towers
//Declare n as number of disks 

//Tower of Hanoi 
//Function to solve the tower of hanoi 
void TOH(int n, char A, char B, char C) 
{ 
   // Base case 
   if (n == 1) 
   { 
       printf("\n Move disk 1 from rod %c to rod %c", A, C); 
       return; 
   } 
   TOH(n-1, A, C, B); 
   printf("\n Move disk %d from rod %c to rod %c", n, A, C); 
   TOH(n-1, B, A, C); 
} 

//Hailstone Sequence
//Recursive function to calculate hailstone sequence 
int hailstoneSequence(int n) 
{ 
   //Base case 
   if (n == 1) 
       return 1; 
   // If n is even 
   if (n % 2 == 0) 
       return 1 + hailstoneSequence(n/2); 
   // If n is odd 
   return 1 + hailstoneSequence(3 * n + 1); 
} 

//Fibonacci Series 
//Recursive function to calculate fibonacci series 
int fibonacci(int n) 
{ 
   //Base case 
   if (n <= 1) 
       return n; 
   //Recursive case
   return fibonacci(n-1) + fibonacci(n-2); 
} 

//Call the functions 
printf("\n Tower of Hanoi :"); 
TOH(n, A, B, C); 

printf("\n Hailstone Sequence : %d", hailstoneSequence(n)); 

printf("\n Fibonacci Series :"); 
for (int i = 0; i < n; i++) 
    printf("%d ", fibonacci(i)); 

end