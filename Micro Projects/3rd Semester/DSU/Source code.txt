#include<stdio.h> 
#include<stdlib.h> 
#include<string.h> 
  
int stack[1000]; 
int top = -1; 
  
void push(int x) 
{ 
    stack[++top] = x; 
} 
  
int pop() 
{ 
    return stack[top--]; 
} 
  
int gcd(int a, int b) 
{ 
    if (b == 0) 
        return a; 
    return gcd(b, a % b);  
} 
  
int hailstone(int n) 
{ 
    int count = 0; 
    while (n != 1) { 
        if (n % 2 == 0) 
            n = n/2; 
        else
            n = (3 * n) + 1; 
        count++; 
    } 
  
    return count; 
} 
  
int fabonacci(int n) 
{ 
    if (n <= 1) 
        return n; 
    return fabonacci(n-1) + fabonacci(n-2); 
} 
  
int fact(int n) 
{ 
    push(n); 
  
    if (n == 0 || n == 1) 
        return 1; 
  
    else
    { 
        int a = pop(); 
        return a*fact(a-1); 
    } 
} 
  
void towerOfHanoi(int n, char from_rod, char to_rod, char aux_rod) 
{ 
    if (n == 1) 
    { 
        printf("\n Move disk 1 from rod %c to rod %c", from_rod, to_rod); 
        return; 
    } 
    towerOfHanoi(n-1, from_rod, aux_rod, to_rod); 
    printf("\n Move disk %d from rod %c to rod %c", n, from_rod, to_rod); 
    towerOfHanoi(n-1, aux_rod, to_rod, from_rod); 
} 
  
main() 
{ 
    int choice;  
    while(1)
    { 
        printf("\n1. Tower of Hanoi"); 
        printf("\n2. Greatest Common Divisor"); 
        printf("\n3. Hailstone Sequence"); 
        printf("\n4. Fabonacci Series"); 
        printf("\n5. Factorial of a number using recursion");
        printf("\n6. Exit"); 
        printf("\nEnter your choice: "); 
        scanf("%d",&choice); 
        switch(choice) 
        { 
            case 1: towerOfHanoi(3, 'A', 'C', 'B'); 
                    break; 
            case 2: printf("\nEnter two numbers: "); 
                    int n1,n2; 
                    scanf("%d %d",&n1,&n2); 
                    printf("\nGCD of %d and %d is %d",n1,n2,gcd(n1,n2)); 
                    break; 
            case 3: printf("\nEnter a number: "); 
                    int n; 
                    scanf("%d",&n); 
                    printf("\nNumber of steps in Hailstone Sequence of %d is: %d",n,hailstone(n)); 
                    break; 
            case 4: printf("\nEnter a number: "); 
                    int f; 
                    scanf("%d",&f); 
                    int i; 
                    printf("\nFabonacci Series of %d is: ",f); 
                    for (i = 0; i < f; i++) 
                        printf("%d ",fabonacci(i)); 
                    break; 
            case 5: printf("\nEnter a number: "); 
                    int fa; 
                    scanf("%d",&fa); 
                    printf("\nFactorial of %d is: %d",fa,fact(fa)); 
                    break; 
            case 6: exit(0); 
        } 
        
    } 
     
}